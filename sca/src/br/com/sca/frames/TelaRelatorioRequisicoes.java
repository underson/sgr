/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * RelatorioRequisicoesFrame.java
 *
 * Created on 23/05/2012, 09:10:31
 */
package br.com.sca.frames;

import br.com.sca.controller.FuncionarioController;
import br.com.sca.entidades.Funcionario;
import br.com.sca.persistencia.Dao;
import br.com.sca.relatorios.Relatorio;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import net.sf.jasperreports.engine.JRException;

/**
 *
 * @author Gregório
 */
public class TelaRelatorioRequisicoes extends javax.swing.JFrame {

    private FuncionarioController controller;
    private Dao dao;
    private String tabelaNome = null;

    /** Creates new form RelatorioRequisicoesFrame */
    public TelaRelatorioRequisicoes() {
        initComponents();
        dao = new Dao();
        controller = new FuncionarioController();
        painelPrincipal.setEnabledAt(3, false);
        rbCompEntrega.setVisible(false);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        groupMateriais = new javax.swing.ButtonGroup();
        groupRequisicoes = new javax.swing.ButtonGroup();
        groupCompras = new javax.swing.ButtonGroup();
        painelPrincipal = new javax.swing.JTabbedPane();
        panelMateriais = new javax.swing.JPanel();
        lbMat = new javax.swing.JLabel();
        rbTodosMateriais = new javax.swing.JRadioButton();
        rbTodosMateriaisMin = new javax.swing.JRadioButton();
        btGerar1 = new javax.swing.JButton();
        panelRequisicao = new javax.swing.JPanel();
        lbReq = new javax.swing.JLabel();
        btGerar2 = new javax.swing.JButton();
        rbReq = new javax.swing.JRadioButton();
        rbReqFunc = new javax.swing.JRadioButton();
        rbReqTemp = new javax.swing.JRadioButton();
        rbReqFuncTemp = new javax.swing.JRadioButton();
        panelCompras = new javax.swing.JPanel();
        lbComp = new javax.swing.JLabel();
        rbComp = new javax.swing.JRadioButton();
        rbCompEntrega = new javax.swing.JRadioButton();
        rbCompCadastro = new javax.swing.JRadioButton();
        btGerar3 = new javax.swing.JButton();
        panelInformacoes = new javax.swing.JPanel();
        calendarioDataInicial = new com.toedter.calendar.JDateChooser();
        calendarioDataFinal = new com.toedter.calendar.JDateChooser();
        lbDataIn = new javax.swing.JLabel();
        lbDataFn = new javax.swing.JLabel();
        lbPesquisaNome = new javax.swing.JLabel();
        tfPesquisaNome = new javax.swing.JTextField();
        scrollTabFunc = new javax.swing.JScrollPane();
        tabelaFuncionario = new javax.swing.JTable();
        btPronto = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        painelPrincipal.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                painelPrincipalFocusLost(evt);
            }
        });

        lbMat.setText("Escolha o tipo de relatório:");

        groupMateriais.add(rbTodosMateriais);
        rbTodosMateriais.setSelected(true);
        rbTodosMateriais.setText("Todos os Materiais");
        rbTodosMateriais.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbTodosMateriaisActionPerformed(evt);
            }
        });

        groupMateriais.add(rbTodosMateriaisMin);
        rbTodosMateriaisMin.setText("Todos os Materiais com quantidade abaixo do limite mínimo");

        btGerar1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/sca/imagem/relatorio_32x32.png"))); // NOI18N
        btGerar1.setText("Gerar Relatório");
        btGerar1.setToolTipText("Gerar Relatório");
        btGerar1.setContentAreaFilled(false);
        btGerar1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btGerar1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelMateriaisLayout = new javax.swing.GroupLayout(panelMateriais);
        panelMateriais.setLayout(panelMateriaisLayout);
        panelMateriaisLayout.setHorizontalGroup(
            panelMateriaisLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelMateriaisLayout.createSequentialGroup()
                .addContainerGap(544, Short.MAX_VALUE)
                .addComponent(btGerar1)
                .addContainerGap())
            .addGroup(panelMateriaisLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelMateriaisLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rbTodosMateriais)
                    .addComponent(rbTodosMateriaisMin)
                    .addComponent(lbMat))
                .addContainerGap(380, Short.MAX_VALUE))
        );
        panelMateriaisLayout.setVerticalGroup(
            panelMateriaisLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelMateriaisLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lbMat)
                .addGap(17, 17, 17)
                .addComponent(rbTodosMateriais)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(rbTodosMateriaisMin)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 114, Short.MAX_VALUE)
                .addComponent(btGerar1)
                .addContainerGap())
        );

        painelPrincipal.addTab("Materiais", panelMateriais);

        lbReq.setText("Escolha o tipo de relatório:");

        btGerar2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/sca/imagem/relatorio_32x32.png"))); // NOI18N
        btGerar2.setText("Gerar Relatório");
        btGerar2.setToolTipText("Gerar Relatório");
        btGerar2.setContentAreaFilled(false);
        btGerar2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btGerar2ActionPerformed(evt);
            }
        });

        groupRequisicoes.add(rbReq);
        rbReq.setSelected(true);
        rbReq.setText("Todas as requisições");

        groupRequisicoes.add(rbReqFunc);
        rbReqFunc.setText("Todas as requisições de um funcionário específico");

        groupRequisicoes.add(rbReqTemp);
        rbReqTemp.setText("Todas as requisições feitas em um intervalo de tempo");

        groupRequisicoes.add(rbReqFuncTemp);
        rbReqFuncTemp.setText("Todas as requisições de um funcionário feitas em um intervalo de tempo");

        javax.swing.GroupLayout panelRequisicaoLayout = new javax.swing.GroupLayout(panelRequisicao);
        panelRequisicao.setLayout(panelRequisicaoLayout);
        panelRequisicaoLayout.setHorizontalGroup(
            panelRequisicaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelRequisicaoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelRequisicaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rbReqFuncTemp)
                    .addComponent(rbReq)
                    .addComponent(lbReq)
                    .addComponent(rbReqFunc)
                    .addComponent(rbReqTemp))
                .addContainerGap(316, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelRequisicaoLayout.createSequentialGroup()
                .addContainerGap(544, Short.MAX_VALUE)
                .addComponent(btGerar2)
                .addContainerGap())
        );
        panelRequisicaoLayout.setVerticalGroup(
            panelRequisicaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelRequisicaoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lbReq)
                .addGap(18, 18, 18)
                .addComponent(rbReq)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rbReqFunc)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rbReqTemp)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rbReqFuncTemp)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 70, Short.MAX_VALUE)
                .addComponent(btGerar2)
                .addContainerGap())
        );

        painelPrincipal.addTab("Requisições", panelRequisicao);

        panelCompras.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                panelComprasFocusLost(evt);
            }
        });

        lbComp.setText("Escolha o tipo de relatório:");

        groupCompras.add(rbComp);
        rbComp.setSelected(true);
        rbComp.setText("Todas as Compras");
        rbComp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbCompActionPerformed(evt);
            }
        });

        groupCompras.add(rbCompEntrega);
        rbCompEntrega.setText("Todas as Compras entregues em um período específico");
        rbCompEntrega.setEnabled(false);

        groupCompras.add(rbCompCadastro);
        rbCompCadastro.setText("Todas as Compras criadas em um período específico");

        btGerar3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/sca/imagem/relatorio_32x32.png"))); // NOI18N
        btGerar3.setText("Gerar Relatório");
        btGerar3.setToolTipText("Gerar Relatório");
        btGerar3.setContentAreaFilled(false);
        btGerar3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btGerar3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelComprasLayout = new javax.swing.GroupLayout(panelCompras);
        panelCompras.setLayout(panelComprasLayout);
        panelComprasLayout.setHorizontalGroup(
            panelComprasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelComprasLayout.createSequentialGroup()
                .addContainerGap(544, Short.MAX_VALUE)
                .addComponent(btGerar3)
                .addContainerGap())
            .addGroup(panelComprasLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelComprasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rbCompEntrega)
                    .addComponent(rbCompCadastro)
                    .addComponent(rbComp)
                    .addComponent(lbComp))
                .addContainerGap(396, Short.MAX_VALUE))
        );
        panelComprasLayout.setVerticalGroup(
            panelComprasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelComprasLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lbComp)
                .addGap(18, 18, 18)
                .addComponent(rbComp)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rbCompCadastro)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rbCompEntrega)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 93, Short.MAX_VALUE)
                .addComponent(btGerar3)
                .addContainerGap())
        );

        painelPrincipal.addTab("Compras", panelCompras);

        panelInformacoes.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                panelInformacoesFocusLost(evt);
            }
        });

        calendarioDataInicial.setEnabled(false);
        calendarioDataInicial.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                calendarioDataInicialPropertyChange(evt);
            }
        });

        calendarioDataFinal.setEnabled(false);
        calendarioDataFinal.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                calendarioDataFinalFocusGained(evt);
            }
        });

        lbDataIn.setText("Data inicial:");

        lbDataFn.setText("Data final:");

        lbPesquisaNome.setText("Pesquisa por nome:");

        tfPesquisaNome.setText("Digite o nome do funcionário");
        tfPesquisaNome.setEnabled(false);
        tfPesquisaNome.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tfPesquisaNomeKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tfPesquisaNomeKeyReleased(evt);
            }
        });

        tabelaFuncionario.setEnabled(false);
        tabelaFuncionario.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabelaFuncionarioMouseClicked(evt);
            }
        });
        scrollTabFunc.setViewportView(tabelaFuncionario);

        btPronto.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/sca/imagem/apply32x32.png"))); // NOI18N
        btPronto.setText("Ok");
        btPronto.setToolTipText("Ok");
        btPronto.setContentAreaFilled(false);
        btPronto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btProntoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelInformacoesLayout = new javax.swing.GroupLayout(panelInformacoes);
        panelInformacoes.setLayout(panelInformacoesLayout);
        panelInformacoesLayout.setHorizontalGroup(
            panelInformacoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelInformacoesLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(panelInformacoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(panelInformacoesLayout.createSequentialGroup()
                        .addComponent(lbPesquisaNome, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(tfPesquisaNome))
                    .addComponent(scrollTabFunc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(panelInformacoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(panelInformacoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(panelInformacoesLayout.createSequentialGroup()
                            .addComponent(lbDataIn)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(calendarioDataInicial, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(panelInformacoesLayout.createSequentialGroup()
                            .addGap(5, 5, 5)
                            .addComponent(lbDataFn)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(calendarioDataFinal, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(btPronto))
                .addGap(115, 115, 115))
        );
        panelInformacoesLayout.setVerticalGroup(
            panelInformacoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelInformacoesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelInformacoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbPesquisaNome)
                    .addComponent(tfPesquisaNome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(scrollTabFunc, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(17, 17, 17))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelInformacoesLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(panelInformacoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(calendarioDataInicial, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbDataIn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelInformacoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lbDataFn)
                    .addComponent(calendarioDataFinal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(202, 202, 202))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelInformacoesLayout.createSequentialGroup()
                .addContainerGap(219, Short.MAX_VALUE)
                .addComponent(btPronto, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        painelPrincipal.addTab("Informações", panelInformacoes);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(painelPrincipal, javax.swing.GroupLayout.PREFERRED_SIZE, 700, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(painelPrincipal, javax.swing.GroupLayout.PREFERRED_SIZE, 285, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void rbTodosMateriaisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbTodosMateriaisActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rbTodosMateriaisActionPerformed

    private void btGerar1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btGerar1ActionPerformed
        // TODO add your handling code here
        if (rbTodosMateriais.isSelected() == true) {
            try {
                try {
                    Relatorio relatorio = new Relatorio("select * from materiais;", "materiais");
                } catch (SQLException ex) {
                    Logger.getLogger(TelaRelatorioRequisicoes.class.getName()).log(Level.SEVERE, null, ex);
                }
            } catch (JRException ex) {
                Logger.getLogger(TelaRelatorioRequisicoes.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else if (rbTodosMateriaisMin.isSelected() == true) {
            try {
                Relatorio relatorio = new Relatorio("select * from materiais where qtd_estq_mat <= qtd_min_mat;", "qtdMinimaMateriais");
            } catch (SQLException ex) {
                Logger.getLogger(TelaRelatorioRequisicoes.class.getName()).log(Level.SEVERE, null, ex);
            } catch (JRException ex) {
                Logger.getLogger(TelaRelatorioRequisicoes.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Selecione um tipo de relatório.");
        }
    }//GEN-LAST:event_btGerar1ActionPerformed

    private void btGerar2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btGerar2ActionPerformed
        // TODO add your handling code here:
        if (rbReq.isSelected() == true) {
            try {
                try {
                    Relatorio relatorio = new Relatorio("select * from funcionario as f, almoxarife as a, "
                            + "departamento as d, requisicao as r, materiais as m, material_requisicao as mr "
                            + "where f.id_func = r.id_func_req and r.id_dept_req = d.id_dept "
                            + "and r.id_almoxarife_req = a.id_almoxarife and r.id_req = mr.id_req_matreq "
                            + "and mr.id_mat_matreq = m.id_mat order by r.data_req asc;", "retiradasPessoa");
                } catch (SQLException ex) {
                    Logger.getLogger(TelaRelatorioRequisicoes.class.getName()).log(Level.SEVERE, null, ex);
                }
            } catch (JRException ex) {
                Logger.getLogger(TelaRelatorioRequisicoes.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else if (rbReqFunc.isSelected() == true) {
            tabelaFuncionario.setEnabled(false);
            tfPesquisaNome.setEnabled(false);
            calendarioDataFinal.setEnabled(false);
            calendarioDataInicial.setEnabled(false);
            tfPesquisaNome.setText(null);
            tfPesquisaNome.setEnabled(true);
            tabelaFuncionario.setEnabled(true);

            System.out.println(controller);
            System.out.println(dao);
            tabelaFuncionario.setModel(controller.retornaModelTabelaCompleta(dao));
            tabelaNome = "requisicao";
            painelPrincipal.setSelectedIndex(3);
        } else if (rbReqFuncTemp.isSelected() == true) {
            tabelaFuncionario.setEnabled(false);
            tfPesquisaNome.setEnabled(false);
            calendarioDataFinal.setEnabled(false);
            calendarioDataInicial.setEnabled(false);
            calendarioDataInicial.setDate(null);
            calendarioDataInicial.setEnabled(true);
            calendarioDataFinal.setDate(null);
            calendarioDataFinal.setEnabled(true);

            tfPesquisaNome.setText(null);
            tfPesquisaNome.setEnabled(true);
            tabelaFuncionario.setEnabled(true);

            tabelaFuncionario.setModel(controller.retornaModelTabelaCompleta(dao));
            tabelaNome = "requisicao";
            painelPrincipal.setSelectedIndex(3);
        } else if (rbReqTemp.isSelected() == true) {
            tabelaFuncionario.setEnabled(false);
            tfPesquisaNome.setEnabled(false);
            calendarioDataFinal.setEnabled(false);
            calendarioDataInicial.setEnabled(false);
            calendarioDataInicial.setDate(null);
            calendarioDataInicial.setEnabled(true);
            calendarioDataFinal.setDate(null);
            calendarioDataFinal.setEnabled(true);

            tabelaNome = "requisicao";
            painelPrincipal.setSelectedIndex(3);
        } else {
            JOptionPane.showMessageDialog(null, "Selecione um tipo de relatório.");
        }
    }//GEN-LAST:event_btGerar2ActionPerformed

    private void tfPesquisaNomeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfPesquisaNomeKeyPressed
        //limpa o campo de pesquisa quando o usuario tecla dentro do campo
        if (tfPesquisaNome.getText().equals("Digite o nome do funcionário")) {
            tfPesquisaNome.setText("");
        }
}//GEN-LAST:event_tfPesquisaNomeKeyPressed

    private void tfPesquisaNomeKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfPesquisaNomeKeyReleased
        tabelaFuncionario.setModel(controller.preencherTabelaParametroNome(dao, tfPesquisaNome.getText()));

}//GEN-LAST:event_tfPesquisaNomeKeyReleased

    private void tabelaFuncionarioMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabelaFuncionarioMouseClicked
}//GEN-LAST:event_tabelaFuncionarioMouseClicked

    private void btProntoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btProntoActionPerformed
        // TODO add your handling code here:
        if (tabelaFuncionario.isEnabled() == true && tabelaFuncionario.getSelectedRow() == -1) {
            JOptionPane.showMessageDialog(null, "É necessário escolher um funcionário para continuar.");
        } else if (calendarioDataInicial.isEnabled() == true && calendarioDataInicial.getDate() == null) {
            JOptionPane.showMessageDialog(null, "É necessário escolher uma data inicial para continuar.");
        } else if (calendarioDataFinal.isEnabled() == true && calendarioDataFinal.getDate() == null) {
            JOptionPane.showMessageDialog(null, "É necessário escolher uma data final para continuar.");
        } else {
            if (tabelaFuncionario.isEnabled() == true && calendarioDataFinal.isEnabled() == false && calendarioDataInicial.isEnabled() == false) {
                if ("requisicao".equals(tabelaNome)) {
                    try {
                        try {
                            Funcionario auxf = new Funcionario();
                            auxf = controller.retornarFuncionarioIndex(tabelaFuncionario.getSelectedRow());
                            Relatorio relatorio = new Relatorio("select * from funcionario as f, almoxarife as a,"
                                    + " departamento as d, requisicao as r, materiais as m, material_requisicao as mr"
                                    + " where m.id_mat = mr.id_mat_matreq and mr.id_req_matreq = r.id_req and "
                                    + "f.id_func = r.id_func_req and a.id_almoxarife = r.id_almoxarife_req and "
                                    + "d.id_dept = r.id_dept_req and f.id_func = '" + auxf.getIdFunc().toString() + "' "
                                    + "order by r.data_req asc;", "retiradasPessoa");
                        } catch (SQLException ex) {
                            Logger.getLogger(TelaRelatorioRequisicoes.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    } catch (JRException ex) {
                        Logger.getLogger(TelaRelatorioRequisicoes.class.getName()).log(Level.SEVERE, null, ex);
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Alguém roubou a tabela desta consulta!");
                }
            } else if (tabelaFuncionario.isEnabled() == false && calendarioDataFinal.isEnabled() == true && calendarioDataInicial.isEnabled() == true) {
                if ("requisicao".equals(tabelaNome)) {
                    try {
                        try {
                            String dataInicial = null, dataFinal = null, dia = null, mes = null, ano = null;
                            int aux;
                            if (calendarioDataInicial.getDate().getDate() < 10) {
                                dia = "0" + calendarioDataInicial.getDate().getDate();
                            } else {
                                dia = "" + calendarioDataInicial.getDate().getDate();
                            }
                            if (calendarioDataInicial.getDate().getMonth() + 1 < 10) {
                                System.out.println(calendarioDataInicial.getDate().getMonth());
                                aux = calendarioDataInicial.getDate().getMonth() + 1;
                                mes = "0" + aux;
                            } else {
                                aux = calendarioDataInicial.getDate().getMonth() + 1;
                                mes = "" + aux;
                            }
                            aux = calendarioDataInicial.getDate().getYear() + 1900;
                            ano = "" + aux;
                            dataInicial = "" + ano + "-" + mes + "-" + dia;

                            if (calendarioDataFinal.getDate().getDate() < 10) {
                                dia = "0" + calendarioDataFinal.getDate().getDate();
                            } else {
                                dia = "" + calendarioDataFinal.getDate().getDate();
                            }
                            if (calendarioDataFinal.getDate().getMonth() + 1 < 10) {
                                System.out.println(calendarioDataInicial.getDate().getMonth());
                                aux = calendarioDataFinal.getDate().getMonth() + 1;
                                mes = "0" + aux;
                            } else {
                                aux = calendarioDataFinal.getDate().getMonth() + 1;
                                mes = "" + aux;
                            }
                            aux = calendarioDataFinal.getDate().getYear() + 1900;
                            ano = "" + aux;
                            dataFinal = "" + ano + "-" + mes + "-" + dia;
                            System.out.println(dataInicial);
                            System.out.println(dataFinal);
                            Relatorio relatorio = new Relatorio("select * from funcionario as f, almoxarife as a, "
                                    + "departamento as d, requisicao as r, materiais as m, material_requisicao as mr "
                                    + "where m.id_mat = mr.id_mat_matreq and mr.id_req_matreq = r.id_req and "
                                    + "f.id_func = r.id_func_req and a.id_almoxarife = r.id_almoxarife_req and "
                                    + "d.id_dept = r.id_dept_req and r.data_req >= '" + dataInicial + " 00:00:00' and "
                                    + "r.data_req <= '" + dataFinal + " 23:59:59' "
                                    + "order by r.data_req asc;", "retiradasPessoa");
                        } catch (SQLException ex) {
                            Logger.getLogger(TelaRelatorioRequisicoes.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    } catch (JRException ex) {
                        Logger.getLogger(TelaRelatorioRequisicoes.class.getName()).log(Level.SEVERE, null, ex);
                    }
                } else if ("compra".equals(tabelaNome)) {
                    if (rbCompCadastro.isSelected() == true) {
                        try {
                            try {
                                String dataInicial = null, dataFinal = null, dia = null, mes = null, ano = null;
                                int aux;
                                if (calendarioDataInicial.getDate().getDate() < 10) {
                                    dia = "0" + calendarioDataInicial.getDate().getDate();
                                } else {
                                    dia = "" + calendarioDataInicial.getDate().getDate();
                                }
                                if (calendarioDataInicial.getDate().getMonth() + 1 < 10) {
                                    System.out.println(calendarioDataInicial.getDate().getMonth());
                                    aux = calendarioDataInicial.getDate().getMonth() + 1;
                                    mes = "0" + aux;
                                } else {
                                    aux = calendarioDataInicial.getDate().getMonth() + 1;
                                    mes = "" + aux;
                                }
                                aux = calendarioDataInicial.getDate().getYear() + 1900;
                                ano = "" + aux;
                                dataInicial = "" + ano + "-" + mes + "-" + dia;

                                if (calendarioDataFinal.getDate().getDate() < 10) {
                                    dia = "0" + calendarioDataFinal.getDate().getDate();
                                } else {
                                    dia = "" + calendarioDataFinal.getDate().getDate();
                                }
                                if (calendarioDataFinal.getDate().getMonth() + 1 < 10) {
                                    System.out.println(calendarioDataInicial.getDate().getMonth());
                                    aux = calendarioDataFinal.getDate().getMonth() + 1;
                                    mes = "0" + aux;
                                } else {
                                    aux = calendarioDataFinal.getDate().getMonth() + 1;
                                    mes = "" + aux;
                                }
                                aux = calendarioDataFinal.getDate().getYear() + 1900;
                                ano = "" + aux;
                                dataFinal = "" + ano + "-" + mes + "-" + dia;
                                System.out.println(dataInicial);
                                System.out.println(dataFinal);
                                Relatorio relatorio = new Relatorio("select *, SUM(mc.preco_matcom*mce.quat_entregue_mce) as valortotal "
                                        + "from fornecedor as f, compra as c, material_compra as mc, "
                                        + "mt_compra_entregue as mce where "
                                        + "c.id_fornec_compra = f.id_fornec and c.id_compra = mc.compra_id_matcom and "
                                        + "mc.id_matcom = mce.id_matcom_mce and "
                                        + "c.data_pedido_compra >= '" + dataInicial + "' and "
                                        + "c.data_pedido_compra <= '" + dataFinal + "' "
                                        + "group by mce.id_mce order by c.data_pedido_compra;", "valorCompras");
                            } catch (SQLException ex) {
                                Logger.getLogger(TelaRelatorioRequisicoes.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        } catch (JRException ex) {
                            Logger.getLogger(TelaRelatorioRequisicoes.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    } else if (rbCompEntrega.isSelected() == true) {
                        try {
                            try {
                                String[] dataInicial = null, dataFinal = null;
                                dataInicial = calendarioDataInicial.getDateFormatString().split("/");
                                dataFinal = calendarioDataFinal.getDateFormatString().split("/");
                                Relatorio relatorio = new Relatorio("select *", "valorCompras");

                                /*   + ", SUM(mc.preco_matcom*mc.quant_matcom) as valortotal "
                                + "from fornecedor as f, compra as c, material_compra as mc where "
                                + "c.id_fornec_compra = f.id_fornec and c.id_compra = mc.compra_id_matcom and "
                                + "c.data_entrega_compra >= '" + dataInicial[2] + "-" + dataInicial[1] + "-" + dataInicial[0] + " 00:00:00' and "
                                + "c.data_entrega_compra <= '" + dataFinal[2] + "-" + dataFinal[1] + "-" + dataFinal[0] + " 23:59:59' "
                                + "group by mc.compra_id_matcom order by c.data_entrega_compra;"*/
                            } catch (SQLException ex) {
                                Logger.getLogger(TelaRelatorioRequisicoes.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        } catch (JRException ex) {
                            Logger.getLogger(TelaRelatorioRequisicoes.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "Aconteceu algo com aqueles radiobuttons..");
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Alguém me diga qual o nome da tabela, por favor..");
                }
            } else if (tabelaFuncionario.isEnabled() == true && calendarioDataFinal.isEnabled() == true && calendarioDataInicial.isEnabled() == true) {
                if ("requisicao".equals(tabelaNome)) {
                    try {
                        try {
                            Funcionario auxf = new Funcionario();
                            auxf = controller.retornarFuncionarioIndex(tabelaFuncionario.getSelectedRow());
                            System.out.println("id func: "+auxf.getIdFunc());
                            String dataInicial = null, dataFinal = null, dia = null, mes = null, ano = null;
                            int aux;
                            if (calendarioDataInicial.getDate().getDate() < 10) {
                                dia = "0" + calendarioDataInicial.getDate().getDate();
                            } else {
                                dia = "" + calendarioDataInicial.getDate().getDate();
                            }
                            if (calendarioDataInicial.getDate().getMonth() + 1 < 10) {
                                System.out.println(calendarioDataInicial.getDate().getMonth());
                                aux = calendarioDataInicial.getDate().getMonth() + 1;
                                mes = "0" + aux;
                            } else {
                                aux = calendarioDataInicial.getDate().getMonth() + 1;
                                mes = "" + aux;
                            }
                            aux = calendarioDataInicial.getDate().getYear() + 1900;
                            ano = "" + aux;
                            dataInicial = "" + ano + "-" + mes + "-" + dia;

                            if (calendarioDataFinal.getDate().getDate() < 10) {
                                dia = "0" + calendarioDataFinal.getDate().getDate();
                            } else {
                                dia = "" + calendarioDataFinal.getDate().getDate();
                            }
                            if (calendarioDataFinal.getDate().getMonth() + 1 < 10) {
                                System.out.println(calendarioDataInicial.getDate().getMonth());
                                aux = calendarioDataFinal.getDate().getMonth() + 1;
                                mes = "0" + aux;
                            } else {
                                aux = calendarioDataFinal.getDate().getMonth() + 1;
                                mes = "" + aux;
                            }
                            aux = calendarioDataFinal.getDate().getYear() + 1900;
                            ano = "" + aux;
                            dataFinal = "" + ano + "-" + mes + "-" + dia;
                            System.out.println(dataInicial);
                            System.out.println(dataFinal);
                            Relatorio relatorio = new Relatorio("select * from funcionario as f, almoxarife as a, "
                                    + "departamento as d, requisicao as r, materiais as m, material_requisicao as mr "
                                    + "where m.id_mat = mr.id_mat_matreq and mr.id_req_matreq = r.id_req and "
                                    + "f.id_func = r.id_func_req and a.id_almoxarife = r.id_almoxarife_req and "
                                    + "d.id_dept = r.id_dept_req and r.data_req >= '" + dataInicial + " 00:00:00' and "
                                    + "r.data_req <= '" + dataFinal + " 23:59:59' and "
                                    + "f.id_func = '" + auxf.getIdFunc().toString() + "' group by r.id_req "
                                    + "order by r.data_req asc;", "retiradasPessoa");
                        } catch (SQLException ex) {
                            Logger.getLogger(TelaRelatorioRequisicoes.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    } catch (JRException ex) {
                        Logger.getLogger(TelaRelatorioRequisicoes.class.getName()).log(Level.SEVERE, null, ex);
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Alguém me diga qual o nome da tabela, por favor..");
                }
            } else {
                JOptionPane.showMessageDialog(null, "Algo errado aconteceu.");
            }

            calendarioDataFinal.setEnabled(false);
            calendarioDataInicial.setEnabled(false);
            tfPesquisaNome.setEnabled(false);
            tabelaFuncionario.setEnabled(false);
            painelPrincipal.setSelectedIndex(0);
        }
    }//GEN-LAST:event_btProntoActionPerformed

private void rbCompActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbCompActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_rbCompActionPerformed

private void btGerar3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btGerar3ActionPerformed
// TODO add your handling code here:
    if (rbComp.isSelected() == true) {
        try {
            try {
                Relatorio relatorio = new Relatorio("select *, SUM(mc.preco_matcom*mce.quat_entregue_mce) as valortotal "
                        + "from fornecedor as f, compra as c, material_compra as mc, mt_compra_entregue as mce "
                        + "where c.id_fornec_compra = f.id_fornec and c.id_compra = mc.compra_id_matcom and "
                        + "mc.id_matcom = mce.id_matcom_mce group by mce.id_mce;", "valorCompras");
            } catch (SQLException ex) {
                Logger.getLogger(TelaRelatorioRequisicoes.class.getName()).log(Level.SEVERE, null, ex);
            }
        } catch (JRException ex) {
            Logger.getLogger(TelaRelatorioRequisicoes.class.getName()).log(Level.SEVERE, null, ex);
        }
    } else if (rbCompCadastro.isSelected() == true) {
        tabelaFuncionario.setEnabled(false);
        tfPesquisaNome.setEnabled(false);
        calendarioDataFinal.setEnabled(false);
        calendarioDataInicial.setEnabled(false);
        calendarioDataInicial.setDate(null);
        calendarioDataInicial.setEnabled(true);
        calendarioDataFinal.setDate(null);
        calendarioDataFinal.setEnabled(true);

        tabelaNome = "compra";
        painelPrincipal.setSelectedIndex(3);
    } else if (rbCompEntrega.isSelected() == true) {
        tabelaFuncionario.setEnabled(false);
        tfPesquisaNome.setEnabled(false);
        calendarioDataFinal.setEnabled(false);
        calendarioDataInicial.setEnabled(false);
        calendarioDataInicial.setDate(null);
        calendarioDataInicial.setEnabled(true);
        calendarioDataFinal.setDate(null);
        calendarioDataFinal.setEnabled(true);

        tabelaNome = "compra";
        painelPrincipal.setSelectedIndex(3);
    } else {
        JOptionPane.showMessageDialog(null, "Selecione um tipo de relatório.");
    }
}//GEN-LAST:event_btGerar3ActionPerformed

private void calendarioDataFinalFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_calendarioDataFinalFocusGained
// TODO add your handling code here:
}//GEN-LAST:event_calendarioDataFinalFocusGained

private void calendarioDataInicialPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_calendarioDataInicialPropertyChange
// TODO add your handling code here:
    calendarioDataFinal.setMinSelectableDate(calendarioDataInicial.getDate());
    calendarioDataFinal.setDate(null);
}//GEN-LAST:event_calendarioDataInicialPropertyChange

private void painelPrincipalFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_painelPrincipalFocusLost
// TODO add your handling code here:
}//GEN-LAST:event_painelPrincipalFocusLost

private void panelComprasFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_panelComprasFocusLost
// TODO add your handling code here:
}//GEN-LAST:event_panelComprasFocusLost

private void panelInformacoesFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_panelInformacoesFocusLost
// TODO add your handling code here:
}//GEN-LAST:event_panelInformacoesFocusLost

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new TelaRelatorioRequisicoes().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btGerar1;
    private javax.swing.JButton btGerar2;
    private javax.swing.JButton btGerar3;
    private javax.swing.JButton btPronto;
    private com.toedter.calendar.JDateChooser calendarioDataFinal;
    private com.toedter.calendar.JDateChooser calendarioDataInicial;
    private javax.swing.ButtonGroup groupCompras;
    private javax.swing.ButtonGroup groupMateriais;
    private javax.swing.ButtonGroup groupRequisicoes;
    private javax.swing.JLabel lbComp;
    private javax.swing.JLabel lbDataFn;
    private javax.swing.JLabel lbDataIn;
    private javax.swing.JLabel lbMat;
    private javax.swing.JLabel lbPesquisaNome;
    private javax.swing.JLabel lbReq;
    private javax.swing.JTabbedPane painelPrincipal;
    private javax.swing.JPanel panelCompras;
    private javax.swing.JPanel panelInformacoes;
    private javax.swing.JPanel panelMateriais;
    private javax.swing.JPanel panelRequisicao;
    private javax.swing.JRadioButton rbComp;
    private javax.swing.JRadioButton rbCompCadastro;
    private javax.swing.JRadioButton rbCompEntrega;
    private javax.swing.JRadioButton rbReq;
    private javax.swing.JRadioButton rbReqFunc;
    private javax.swing.JRadioButton rbReqFuncTemp;
    private javax.swing.JRadioButton rbReqTemp;
    private javax.swing.JRadioButton rbTodosMateriais;
    private javax.swing.JRadioButton rbTodosMateriaisMin;
    private javax.swing.JScrollPane scrollTabFunc;
    private javax.swing.JTable tabelaFuncionario;
    private javax.swing.JTextField tfPesquisaNome;
    // End of variables declaration//GEN-END:variables
}
